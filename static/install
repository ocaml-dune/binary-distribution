#!/bin/sh
# This script is meant to be POSIX compatible, to work on as many different systems as possible.
# Please try to stick to this. Use a tool like shellcheck to validate changes.
set -eu

# the whole body of the script is wrapped in a function so that a partially
# downloaded script does not get executed by accident. The function is called
# at the end
main () {

# Reset
Color_Off='\033[0m' # Text Reset

# Regular Colors
Red='\033[0;31m'   # Red
Green='\033[0;32m' # Green
White='\033[0;0m'  # White

# Bold
Bold_Green='\033[1;32m' # Bold Green
Bold_White='\033[1m'    # Bold White

error() {
    printf "%berror%b: %s\n" "${Red}" "${Color_Off}" "$*" >&2
    exit 1
}

info() {
     printf "%b%s %b" "${White}" "$*" "${Color_Off}"
}

info_bold() {
    printf "%b%s %b" "${Bold_White}" "$*" "${Color_Off}"
}

success() {
    printf "%b%s %b" "${Green}" "$*" "${Color_Off}"
}

success_bold() {
    printf "%b%s %b" "${Bold_Green}" "$*" "${Color_Off}"
}

tildify() {
    case "$1" in
    "$HOME"/*)
        tilde_replacement=\~
        echo "$1" | sed "s|$HOME|$tilde_replacement|g"
        ;;
    *)
        echo "$1"
        ;;
    esac
}

ensure_command() {
    command -v "$1" >/dev/null 2>&1 ||
        error "Failed to find \"$1\". This script needs \"$1\" to be able to install dune."
}

case $(uname -ms) in
'Darwin x86_64')
    target=x86_64-apple-darwin
    ;;
'Darwin arm64')
    target=aarch64-apple-darwin
    ;;
'Linux x86_64')
    target=x86_64-unknown-linux-musl
    ;;
*)
    error "The Dune Developer Preview does not currently support $(uname -ms)."
esac

tar_target_name="dune-$target"
tar_target="$tar_target_name.tar.gz"
dune_tar_uri="https://preview.dune.build/latest/$target"

install_dir="$HOME/.dune"
bin_dir="$install_dir/bin"
tmp_dir="$install_dir/tmp"
exe="$bin_dir/dune"
tmp_tar="$tmp_dir/$tar_target"

ensure_command "tar"
# technically gunzip probably but they will both exist
ensure_command "gzip"
ensure_command "curl"

if [ ! -d "$bin_dir" ]; then
    mkdir -p "$bin_dir" ||
        error "Failed to create install directory \"$bin_dir\""
fi

if [ ! -d "$tmp_dir" ]; then
    mkdir -p "$tmp_dir" ||
        error "Failed to create temporary directory \"$tmp_dir\""
    trap 'rm -r "$tmp_dir"' EXIT
fi

curl --fail --location --progress-bar --output "$tmp_tar" "$dune_tar_uri" ||
    error "Failed to download dune tar from \"$dune_tar_uri\""


tar -xf "$tmp_tar" -C "$tmp_dir" > /dev/null 2>&1 ||
    error "Failed to extract dune archive content from \"$tmp_tar\""

# locate the name of the directory that was unpacked in the tarball
tmp_tar_dir="$(find "$tmp_dir" -mindepth 1 -maxdepth 1 -type d)"

tmp_exe="$tmp_tar_dir/dune"

mv "$tmp_exe" "$exe" ||
    error "Failed to move executable from $tmp_exe to $exe"

if [ -d "$install_dir/env" ]; then
    rm -r "$install_dir/env"
fi
mv "$tmp_tar_dir/env" "$install_dir" ||
    error "Failed to move env from $tmp_tar_dir to $install_dir"

if [ -d "$install_dir/completions" ]; then
    rm -r "$install_dir/completions"
fi
mv "$tmp_tar_dir/completions" "$install_dir" ||
    error "Failed to move completions from $tmp_tar_dir to $install_dir"

success "dune $target was installed successfully to"
success_bold "$(tildify "$exe")"
echo
echo

already_installed=false

case $(basename "$SHELL") in
fish)
    env_file="\$HOME/.dune/env/env.fish"

    fish_config=$HOME/.config/fish/config.fish
    tilde_fish_config=$(tildify "$fish_config")

    # deliberately omit the home directory from the pattern so "~" and "$HOME" can be used interchangeably
    if [ -f "$fish_config" ] && match=$(grep -n ".dune/env/env.fish" "$fish_config"); then
        echo "Shell configuration for dune appears to already exist in \"$fish_config\":"
        echo "$match"
        already_installed=true
        refresh_command="source $tilde_fish_config"
    elif [ -w "$fish_config" ]; then
        printf "\n# dune\n%s\n" "source $env_file" >> "$fish_config"

        info "Sourced \"$env_file\" in \"$tilde_fish_config\""
        echo

        refresh_command="source $tilde_fish_config"
    else
        echo "To use dune you will need to source the file \"$env_file\""
        echo
    fi
    ;;
zsh)

    env_file="\$HOME/.dune/env/env.zsh"

    zsh_config=$HOME/.zshrc
    tilde_zsh_config=$(tildify "$zsh_config")

    # deliberately omit the home directory from the pattern so "~" and "$HOME" can be used interchangeably
    if [ -f "$zsh_config" ] && match=$(grep -n ".dune/env/env.zsh" "$zsh_config"); then
        echo "Shell configuration for dune appears to already exist in \"$zsh_config\":"
        echo "$match"
        already_installed=true
        refresh_command="exec $SHELL"
    elif [ -w "$zsh_config" ]; then
        printf "\n# dune\n%s\n" "source $env_file" >>"$zsh_config"

        info "Sourced \"$env_file\" in \"$tilde_zsh_config\""
        echo

        refresh_command="exec $SHELL"
    else
        echo "To use dune you will need to source the file \"$env_file\""
        echo
    fi
    ;;
bash)

    env_file="\$HOME/.dune/env/env.bash"

    bash_configs="$HOME/.bashrc $HOME/.bash_profile"

    if [ "${XDG_CONFIG_HOME:-}" ]; then
        bash_configs="$bash_configs $XDG_CONFIG_HOME/.bash_profile $XDG_CONFIG_HOME/.bashrc $XDG_CONFIG_HOME/bash_profile $XDG_CONFIG_HOME/bashrc"
    fi

    for bash_config in $bash_configs; do
        # deliberately omit the home directory from the pattern so "~" and "$HOME" can be used interchangeably
        if [ -f "$bash_config" ] && match=$(grep -n ".dune/env/env.bash" "$bash_config"); then
            echo "Shell configuration for dune appears to already exist in \"$bash_config\":"
            echo "$match"
            refresh_command="source $bash_config"
            already_installed=true
            break
        fi
    done

    if [ "$already_installed" = false ]; then
        set_manually=true
        for bash_config in $bash_configs; do
            tilde_bash_config=$(tildify "$bash_config")

            if [ -w "$bash_config" ]; then
                printf "\n# dune\n%s\n" "source $env_file" >>"$bash_config"

                info "Sourced \"$env_file\" in \"$tilde_bash_config\""
                echo

                refresh_command="source $bash_config"
                set_manually=false
                break
            fi
        done

        if [ $set_manually = true ]; then
            echo "To use dune you will need to source the file \"$env_file\""
            echo
        fi
    fi
    ;;
*)
    env_file="\$HOME/.dune/env/env.bash"
    echo "To use dune you will need to source the file \"$env_file\" (or similar as appropriate for your shell)"
    info_bold "  export PATH=\"$bin_dir:\$PATH\""
    echo
    ;;
esac


if [ "$already_installed" = false ]; then
    echo
    info "To get started, run:"
    echo

    if [ -n "${refresh_command+x}" ]; then
        info_bold "  $refresh_command"
        echo
    fi

    info_bold "  dune --help"
    echo
fi

# end of main
}

main
