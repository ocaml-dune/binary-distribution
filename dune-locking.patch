From c7a28064562007f1e1083cd905444bb245e615fc Mon Sep 17 00:00:00 2001
From: Etienne Marais <dev@maiste.fr>
Date: Thu, 22 Aug 2024 11:58:26 +0200
Subject: [PATCH 1/2] feat: ask to re run dune pkg lock on change

Signed-off-by: Etienne Marais <dev@maiste.fr>
---
 bin/build_cmd.ml                  | 36 ++++++++++++++++++++++++++++++-
 bin/pkg/pkg_common.ml             |  2 ++
 bin/pkg/pkg_common.mli            |  4 ++++
 src/dune_pkg/package_universe.ml  | 19 ++++++++++++++++
 src/dune_pkg/package_universe.mli |  8 +++++++
 5 files changed, 68 insertions(+), 1 deletion(-)

diff --git a/bin/build_cmd.ml b/bin/build_cmd.ml
index b7e09e8fe..15b9c9312 100644
--- a/bin/build_cmd.ml
+++ b/bin/build_cmd.ml
@@ -30,6 +30,36 @@ let with_metrics ~common f =
     Fiber.return ())
 ;;
 
+let raise_on_lock_dir_out_of_sync () =
+  Memo.of_thunk (fun () ->
+    let open Memo.O in
+    let lock_dir_path = Dune_pkg.Lock_dir.default_path in
+    let lock_dirs = Pkg_common.Lock_dirs_arg.of_path lock_dir_path in
+    let* per_contexts =
+      Workspace.workspace () >>| Pkg_common.Lock_dirs_arg.lock_dirs_of_workspace lock_dirs
+    in
+    let lock_dirs =
+      List.filter_map per_contexts ~f:(fun lock_dir_path ->
+        match Path.exists (Path.source lock_dir_path) with
+        | true -> Some (Dune_pkg.Lock_dir.read_disk lock_dir_path)
+        | false -> None)
+    in
+    match lock_dirs with
+    | [] -> Memo.return ()
+    | lock_dirs ->
+      let* local_packages = Pkg_common.find_local_packages in
+      let locks =
+        List.map lock_dirs ~f:(fun lock_dir ->
+          match Dune_pkg.Package_universe.up_to_date local_packages lock_dir with
+          | `Valid -> Memo.return ()
+          | `Invalid _ ->
+            let hints = Pp.[ text "run dune pkg lock" ] in
+            User_error.raise ~hints [ Pp.text "The lock dir is not sync with your dune-project" ])
+      in
+      let+ (_ : unit list) = Memo.all_concurrently locks in
+      ())
+;;
+
 let run_build_system ~common ~request =
   let run ~(toplevel : unit Memo.Lazy.t) =
     with_metrics ~common (fun () -> build (fun () -> Memo.Lazy.force toplevel))
@@ -46,8 +76,12 @@ let run_build_system ~common ~request =
          worth the effort. *)
       Cached_digest.invalidate_cached_timestamps ();
       let* setup = Import.Main.setup () in
+      let setup_with_check =
+        Memo.bind (raise_on_lock_dir_out_of_sync ()) ~f:(fun () -> setup)
+      in
       let request =
-        Action_builder.bind (Action_builder.of_memo setup) ~f:(fun setup -> request setup)
+        Action_builder.bind (Action_builder.of_memo setup_with_check) ~f:(fun setup ->
+          request setup)
       in
       (* CR-someday cmoseley: Can we avoid creating a new lazy memo node every
          time the build system is rerun? *)
diff --git a/bin/pkg/pkg_common.ml b/bin/pkg/pkg_common.ml
index d5f04f5bc..fd897dfc6 100644
--- a/bin/pkg/pkg_common.ml
+++ b/bin/pkg/pkg_common.ml
@@ -136,6 +136,8 @@ module Lock_dirs_arg = struct
        All)
   ;;
 
+  let of_path p = Selected [ p ]
+
   let lock_dirs_of_workspace t (workspace : Workspace.t) =
     let workspace_lock_dirs =
       Lock_dir.default_path
diff --git a/bin/pkg/pkg_common.mli b/bin/pkg/pkg_common.mli
index 090129f42..865ec87a9 100644
--- a/bin/pkg/pkg_common.mli
+++ b/bin/pkg/pkg_common.mli
@@ -62,6 +62,10 @@ module Lock_dirs_arg : sig
         of the workspace are considered. *)
   val term : t Term.t
 
+  (** [Lock_dirs_arg.of_path] creates a specific lock dir argument out of a
+      source path *)
+  val of_path : Path.Source.t -> t
+
   (** [Lock_dirs_arg.lock_dirs_of_workspace t workspace] returns the list of
       lock directories that should be considered for various operations.
 
diff --git a/src/dune_pkg/package_universe.ml b/src/dune_pkg/package_universe.ml
index 74a7005a5..ece1360f8 100644
--- a/src/dune_pkg/package_universe.ml
+++ b/src/dune_pkg/package_universe.ml
@@ -127,6 +127,25 @@ let check_for_unnecessary_packges_in_lock_dir
       ])
 ;;
 
+let up_to_date local_packages (lock_dir : Lock_dir.t) =
+  let local_packages =
+    Package_name.Map.values local_packages |> List.map ~f:Local_package.for_solver
+  in
+  let non_local_dependencies =
+    Local_package.For_solver.list_non_local_dependency_set local_packages
+  in
+  let dependency_hash = Local_package.Dependency_set.hash non_local_dependencies in
+  match lock_dir.dependency_hash, dependency_hash with
+  | None, None -> `Valid
+  | Some (_, lock_dir_dependency_hash), Some non_local_dependencies_hash
+    when Local_package.Dependency_hash.equal
+           lock_dir_dependency_hash
+           non_local_dependencies_hash -> `Valid
+  | None, Some non_local_dependencies_hash | Some _, Some non_local_dependencies_hash ->
+    `Invalid (Some non_local_dependencies_hash)
+  | Some _, None -> `Invalid None
+;;
+
 let validate_dependency_hash { local_packages; lock_dir; _ } =
   let local_packages =
     Package_name.Map.values local_packages |> List.map ~f:Local_package.for_solver
diff --git a/src/dune_pkg/package_universe.mli b/src/dune_pkg/package_universe.mli
index 2b2273fc1..ae90027d5 100644
--- a/src/dune_pkg/package_universe.mli
+++ b/src/dune_pkg/package_universe.mli
@@ -10,6 +10,14 @@ val create
   -> Lock_dir.t
   -> (t, User_message.t) result
 
+(** Verifies if the dependencies described in the project file are still
+    synchronize with the dependencies selected in the lock directroy. If it is
+    not the case, it returns the hash of the new dependency set. *)
+val up_to_date
+  :  Local_package.t Package_name.Map.t
+  -> Lock_dir.t
+  -> [ `Valid | `Invalid of Local_package.Dependency_hash.t option ]
+
 (** Returns the dependencies of the specified package within the package
     universe *)
 val opam_package_dependencies_of_package
-- 
2.46.0


From 4f9b0bf144f978223edbf2ce514df8d495bedb90 Mon Sep 17 00:00:00 2001
From: Etienne Marais <dev@maiste.fr>
Date: Tue, 27 Aug 2024 18:12:51 +0200
Subject: [PATCH 2/2] fix: apply fmt

Signed-off-by: Etienne Marais <dev@maiste.fr>
---
 bin/build_cmd.ml | 4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

diff --git a/bin/build_cmd.ml b/bin/build_cmd.ml
index 15b9c9312..61994fa18 100644
--- a/bin/build_cmd.ml
+++ b/bin/build_cmd.ml
@@ -54,7 +54,9 @@ let raise_on_lock_dir_out_of_sync () =
           | `Valid -> Memo.return ()
           | `Invalid _ ->
             let hints = Pp.[ text "run dune pkg lock" ] in
-            User_error.raise ~hints [ Pp.text "The lock dir is not sync with your dune-project" ])
+            User_error.raise
+              ~hints
+              [ Pp.text "The lock dir is not sync with your dune-project" ])
       in
       let+ (_ : unit list) = Memo.all_concurrently locks in
       ())
-- 
2.46.0

